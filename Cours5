#%pip install yfinance
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)
import requests
from bs4 import BeautifulSoup
import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go

def make_graph(stock_data, revenue_data, stock):
   fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
   stock_data['Date'] = pd.to_datetime(stock_data['Date'])
   revenue_data['Date'] = pd.to_datetime(revenue_data['Date'])
   stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
   revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
   fig.add_trace(go.Scatter(x=stock_data_specific.Date, y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
   fig.add_trace(go.Scatter(x=revenue_data_specific.Date, y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
   fig.update_xaxes(title_text="Date", row=1, col=1)
   fig.update_xaxes(title_text="Date", row=2, col=1)
   fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
   fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
   fig.update_layout(showlegend=False,
   height=900,
   title=stock,
   xaxis_rangeslider_visible=True)
   fig.show()
   from IPython.display import display, HTML
   fig_html = fig.to_html()
   display(HTML(fig_html))

#CODE QUESTION 1
# Create a Ticker object for TSLA
tsla_ticker = yf.Ticker("TSLA")
# Get information about TSLA as a dictionary
tsla_info = tsla_ticker.info

# Get historical data
tsla_data = tsla_ticker.history(period="max")
tsla_data.reset_index(inplace=True)
tsla_data.head()

#QUESTION 2
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text
#print(html_data)
soup = BeautifulSoup(html_data, 'html.parser')
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup.find("tbody").find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)

display(tesla_revenue.head())

#Execute the following line to remove the comma and dollar sign from the Revenue column.
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"",regex=True)
#Execute the following lines to remove an null or empty strings in the Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

#Display the last 5 row of the tesla_revenue dataframe using the tail function. Take a screenshot of the results.
tesla_revenue.tail()

#CODE QUESTION 3
# Create a Ticker object for GME
gme_ticker = yf.Ticker("GME")
# Get information about GME as a dictionary
gme_info = gme_ticker.info
# Get historical data
gme_data = gme_ticker.history(period="max")
gme_data.reset_index(inplace=True)
gme_data.head()

#CODE QUESTION 4
url2="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(url2).text
soup2 = BeautifulSoup(html_data_2, 'html.parser')
gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup2.find("tbody").find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    gme_revenue = pd.concat([gme_revenue, pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)

# Execute the following line to remove the comma and dollar sign from the Revenue column for gme_revenue.
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"",regex=True)

# Execute the following lines to remove an null or empty strings in the Revenue column for gme_revenue.
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]
gme_revenue.tail()

#QUESTION 5:Appel de la fonction make_graph
make_graph(tsla_data,tesla_revenue,"Tesla")
#QUESTION 5:Appel de la fonction make_graph
make_graph(gme_data,gme_revenue,"GameStop")
